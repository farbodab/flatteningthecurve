apiVersion: v1
kind: Template
metadata:
  name: hmf-backend
  annotations:
    iconClass: icon-jboss
    tags: python, web app
    template.openshift.io/provider-display-name: "Red Hat, Inc."
    description: Building @HowsMyFlattening backend Python App
parameters:
  - name: APP_NAME
    description: The name of the application
    displayName: Application Name
    required: true
  - name: APP_HOST
    description: The name of the Route
    displayName: Application Route
    required: true
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 2
    selector:
      app: ${APP_NAME}
    strategy:
      rollingParams:
        timeoutSeconds: 3600
      type: Rolling
    template:
      metadata:
        labels:
          app: ${APP_NAME}
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          image: ${APP_NAME}
          volumeMounts:
          - mountPath: "/opt/app-root/app"
            name: jupyterhub-shared-data-secret-iphis
          imagePullPolicy: IfNotPresent
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
      metadata:
        labels:
          app: ${APP_NAME}
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: http
      port: 8080
    selector:
      app: ${APP_NAME}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    host: ${APP_HOST}
    port:
      targetPort: 8080
    to:
      kind: Service
      name: ${APP_NAME}
